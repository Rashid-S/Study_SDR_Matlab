% Инициализация параметров устройства в структуре rtlsdr
rtlsdr.tunerfreq    = 936.0e6; % центральная частота, Гц
rtlsdr.gain         = 25;      % усиление, дБ
rtlsdr.fs           = 2.4e6;   % частота дискретизации, Гц
rtlsdr.frmlen       = 4096;    % размер кадра, выборок
rtlsdr.datatype     = 'single';% тип выходных данных
rtlsdr.ppm          = 0;       % коррекция сдвига частоты, ppm
sim_time            = 1;       % время моделирования, с 
% системный объект приемника RTL-SDR
obj_rtlsdr = comm.SDRRTLReceiver(...
    'CenterFrequency',      rtlsdr.tunerfreq,...
    'EnableTunerAGC',       false,...
    'TunerGain',            rtlsdr.gain,...
    'SampleRate',           rtlsdr.fs, ...
    'SamplesPerFrame',      rtlsdr.frmlen,...
    'OutputDataType',       rtlsdr.datatype ,...
    'FrequencyCorrection',  rtlsdr.ppm );
% системный объект анализатора спектра
obj_specfft = dsp.SpectrumAnalyzer(...
    'Name',             'Анализатор спектра',...
    'Title',            'Spectrum Analyzer FFT',...
    'SpectrumType',     'Power density',...
    'FrequencySpan',    'Full',...
    'SampleRate',       rtlsdr.fs);
% системный объект спектрограммы 
obj_specwaterfall = dsp.SpectrumAnalyzer(...
    'Name',             'Спектрограмма',...
    'Title',            'Spectrum Analyzer Waterfall',...
    'SpectrumType',     'Spectrogram',...
    'FrequencySpan',    'Full',...
    'SampleRate',       rtlsdr.fs);
% вычисление длительности кадра
rtlsdr.frmtime = rtlsdr.frmlen/rtlsdr.fs;
run_time = 0;   % инициализация времени моделирования
% цикл приема до окончания времени моделирования
while run_time < sim_time
    % прием кадров от устройства RTL-SDR
    rx_data = obj_rtlsdr();
    % визуализация спектра и спектрограммы по принятым кадрам
    obj_specfft(rx_data);
    obj_specwaterfall(rx_data);
    % инкремент времени моделирования длительностью кадра
    run_time = run_time + rtlsdr.frmtime;
end