clear all; clc;
% »нициализаци€ параметров устройства в структуре rtlsdr
rtlsdr.tunerfreq = 1200.0e6; % ожидаема€ fc, √ц
rtlsdr.fs        = 2e6;      % частота дискретизации, √ц
rtlsdr.frmlen    = 4096;     % размер кадра, выборок
rtlsdr.ppm       = 50;        % коррекци€ сдвига частоты, ppm
sim_time         = 10;       % врем€ моделировани€, с 
% инициализаци€ системного объекта comm.SDRRTLReceiver
obj_rtlsdr = comm.SDRRTLReceiver(...
    'CenterFrequency',      rtlsdr.tunerfreq,...
    'EnableTunerAGC',       true, ...
    'SampleRate',           rtlsdr.fs, ...
    'SamplesPerFrame',      rtlsdr.frmlen,...
    'OutputDataType',       'double',...
    'FrequencyCorrection',  rtlsdr.ppm );
% »нициализаци€ системного объекта анализатора спектра  
obj_specfft = dsp.SpectrumAnalyzer(...
    'Name',             'јнализатор спектра',...
    'Title',            'Spectrum Analyzer FFT',...
    'SpectrumType',     'Power density',...
    'FrequencySpan',    'Full',...
    'SampleRate',       rtlsdr.fs,...
    'SpectralAverages', 50, ...
    'FrequencySpan',    'Start and stop frequencies', ...
    'StartFrequency',   -200e3, ...
    'StopFrequency',    200e3);
% вычисление длительности кадра
rtlsdr.frmtime = rtlsdr.frmlen/rtlsdr.fs;
run_time = 0;   % инициализаци€ времени моделировани€
while run_time < sim_time
    % прием кадров от устройства RTL-SDR
    rxsig = obj_rtlsdr();
    % исключение посто€нной составл€ющей
    rxsig = rxsig - mean(rxsig);
    % отображение спектра принимаемого сигнала
    obj_specfft(rxsig);
    % вычисление частотного сдвига в √ц и  ppm
    offset_f    = freqoffset(rxsig);     % √ц
    offset_ppm  = (-offset_f/rtlsdr.tunerfreq)*1e6; % ppm
    disp(['сдвиг = ',num2str(offset_f),' √ц',...
        ', коррекци€ = ', num2str(offset_ppm), ' ppm']);
    % инкремент времени моделировани€ длительностью кадра
    run_time = run_time + rtlsdr.frmtime;
end
% освобождение системных объектов
release(obj_rtlsdr); release(obj_specfft);